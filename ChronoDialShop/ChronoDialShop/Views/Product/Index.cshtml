@model PaginateVm

<section class="desktop-productsection">
         <h1>Products</h1>
         <div class="shopfullcontainer">
            <div class="filtercontainer">
                <div class="filterwordcontainer">Filter:</div>
                <div class="eachfiltercontainer">
                    <div class="eachfilterinnercontainer">Price <i class="fa-solid fa-chevron-down"></i></div>
                    <ul class="numberinputcontainer">
                        <li class="numberinputinnercontainer">
                            <input type="number" placeholder="Min">
                            <input type="number" placeholder="Max">
                        </li>
                    </ul>
                </div>
                <div class="eachfiltercontainer">
                    <div class="eachfilterinnercontainer">Brands <i class="fa-solid fa-chevron-down"></i> </div>
                    <ul class="eachfilterlist">

                    @await Component.InvokeAsync("Brand")

                    </ul>
                </div>
                <div class="eachfiltercontainer">
                    <div class="eachfilterinnercontainer">Band Material <i class="fa-solid fa-chevron-down"></i></div>
                    <ul class="eachfilterlist">

                    @await Component.InvokeAsync("BandTypeShop")

                    </ul>
                   
                </div>
                <div class="eachfiltercontainer">
                    <div class="eachfilterinnercontainer">Inner Color <i class="fa-solid fa-chevron-down"></i></div>
                    <ul class="eachfilterlist">
                    @await Component.InvokeAsync("InnerColorShop")
                    </ul>
                </div>
                <div class="eachfiltercontainer">
                    <div class="eachfilterinnercontainer">Visualization <i class="fa-solid fa-chevron-down"></i></div>
                    <ul class="eachfilterlist">
                     @await Component.InvokeAsync("VisualizationShop")
                    </ul>
                </div>
                <div class="eachfiltercontainer">
                    <div class="eachfilterinnercontainer">Vendor <i class="fa-solid fa-chevron-down"></i></div>
                    <ul class="eachfilterlist">
                     @await Component.InvokeAsync("VendorShop")
                    </ul>
                </div>
                @*<div class="eachfiltercontainer">
                    <div class="eachfilterinnercontainer">Gender <i class="fa-solid fa-chevron-down"></i></div>
                    <ul class="eachfilterlist">
                        <li> <label for=""> <input type="checkbox" name="" id=""> <span>Avqa</span> </label> </li>
                        <li> <label for=""> <input type="checkbox" name="" id=""> <span>Bvfd</span> </label> </li>
                        <li> <label for=""> <input type="checkbox" name="" id=""> <span>Ccs</span> </label> </li>
                    </ul>
                </div>*@
            </div>
            <div class="shopfullcontainerright">
                <div class="sortedfunctionscontaier">
                    <div></div>
                    <div class="sort-count">
                        <div class="sortallcontainer">
                             <select class="form-control" id="sort">
                                 <option value="">Seçin</option>
                                 <option value="1" class="sortitem">Alphabetically, A-Z</option>
                                 <option value="2" class="sortitem">Alphabetically, Z-A</option>
                                 <option value="3" class="sortitem">Price, higt to low</option>
                                 <option value="4" class="sortitem">Price, low to high</option>
                             </select>
                        </div>
                        <p> <span>18</span> Products </p>
                    </div>
                </div>
                <div class="resultcontainer grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 productscontainer">
                    
                  @* @await Component.InvokeAsync("ProductMain");*@

                   @await Html.PartialAsync("_ProductPartial", Model.Products)
                </div>
                <div class="paginationcontainer">
                    <ul>
                        @if (Model.CurrentPage != 1)
                        {
                             <li class="page-item">
                                 <a class="innercontainer page-link" asp-action="Index" asp-controller="Product" asp-route-page="@(Model.CurrentPage-1)">
                                       <i class="fa-solid fa-angle-left"></i>
                                 </a>
                             </li>
                        }
                
                        @for (int i = 1; i <= Model.TotalPageCount; i++)
                        {
                            <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                                <a class="innercontainer page-link" asp-action="Index" asp-controller="Product" asp-route-page="@i">@i</a>
                            </li>
                        }
                
                        @if (Model.CurrentPage != Model.TotalPageCount)
                        {
                            <li class="page-item">
                                <a class="innercontainer page-link" asp-action="Index" asp-controller="Product" asp-route-page="@(Model.CurrentPage+1)">
                                    <i class="fa-solid fa-angle-right"></i>
                                </a>
                            </li>
                        }
                
                    </ul>
                </div>
            </div>
        </div>
</section>


@*<li>
                                    <label for="Filter-rating-ascending-5">
                                        <input type="radio" id="Filter-rating-ascending-5"> <span>Rating, low to high</span>
                                    </label>
                                </li>
                                <li>
                                    <label for="Filter-rating-descending-6">
                                        <input type="radio" id="Filter-rating-descending-6"> <span>Rating, low to high</span>
                                    </label
                                ></li>*@


@section Scripts {
    <script>
        //document.querySelectorAll(".brand-item").forEach(brand => {
        //    var id = brand.dataset.id;

        function getFilterDto() {
            var brandsIds = [];
            var vendorsIds = [];
            var bandTypesIds = [];
            var visualizationsIds = [];
            var innerColorsIds = [];

            $("input[name='BrandsIds']:checked").each(function () {
                brandsIds.push(parseInt($(this).val()));
            });
            $("input[name='VendorsIds']:checked").each(function () {
                vendorsIds.push(parseInt($(this).val()));
            });
            $("input[name='BandTypesIds']:checked").each(function () {
                bandTypesIds.push(parseInt($(this).val()));
            });
            $("input[name='VisualizationsIds']:checked").each(function () {
                visualizationsIds.push(parseInt($(this).val()));
            });
            $("input[name='InnerColorsIds']:checked").each(function () {
                innerColorsIds.push(parseInt($(this).val()));
            });


            //var minPrice = parseInt($("#slider-min-price").val());
            //var maxPrice = parseInt($("#slider-max-price").val());

            return {
                BrandsIds: brandsIds,
                VendorsIds: vendorsIds,
                BandTypesIds: bandTypesIds,
                VisualizationsIds: visualizationsIds,
                InnerColorsIds: innerColorsIds,
                //MinPrice: isNaN(minPrice) ? 0 : minPrice,
                //MaxPrice: isNaN(maxPrice) ? 20000 : maxPrice,
            };
        }



        const sendSortRequest = async (id) => {
            const dto = getFilterDto();

            try {
                const response = await fetch(`/Product/SortProducts/${id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: dto
                });

                if (response.ok) {
                    const data = await response.text();
                    //console.log(data);
                    document.querySelector(".productscontainer").innerHTML = data;
                } else {
                    console.error('Failed to fetch sorted products');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        };



        const sendFilterRequest = async (id) => {
            const dto = getFilterDto();
            console.log(dto);
            try {
                const response = await fetch(`/Product/FilterViewProducts/${id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: dto
                });

                if (response.ok) {
                    const data = await response.text();
                    console.log(data);
                    document.querySelector(".productscontainer").innerHTML = data;
                } else {
                    console.error('Failed to fetch sorted products');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        };

        // Add event listeners to all checkboxes
        document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('click', async () => {
                await sendFilterRequest(checkbox.value);
            });
        });

        // Add event listeners to all radio buttons
        //document.querySelectorAll('.allsortlist input[type="radio"]').forEach(radio => {
        //    radio.addEventListener('click', async (e) => {
        //        const sortId = e.target.closest('li').id;
        //        await sendRequest(sortId);
        //    });
        //});

        document.querySelector('#sort').addEventListener('change', (e) => {
            const sortId = getCurrentOptionId();
            console.log(sortId);
            sendSortRequest(sortId);
        });

        function getCurrentOptionId() {
            var selectElement = document.getElementById("sort");
            var selectedIndex = selectElement.selectedIndex;
            var selectedOption = selectElement.options[selectedIndex];
            var selectedOptionId = selectedOption.value;
            return selectedOptionId;
        }

    </script>





     
}

